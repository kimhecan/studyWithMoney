{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\TodoList\\\\front\\\\components\\\\loginForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Input } from 'antd';\nimport { loginRequestAction } from '../reducers/user';\n\nvar LoginForm = function LoginForm() {\n  _s();\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch,\n      errors = _useForm.errors; // console.log(watch('example')); // watch input value by passing the name of it \n\n\n  var dispatch = useDispatch();\n\n  var onSubmit = function onSubmit(data) {\n    dispatch(loginRequestAction({\n      id: data.id,\n      password: data.password\n    }));\n    console.log(data.id, data.password);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    name: \"id\",\n    defaultValue: \"\",\n    ref: register({\n      required: true\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }), errors.id && __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 23\n    }\n  }, \"id is required\"), __jsx(Input.Password, {\n    placeholder: \"input password\",\n    iconRender: function iconRender(visible) {\n      return visible ? __jsx(EyeTwoTone, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 45\n        }\n      }) : __jsx(EyeInvisibleOutlined, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 62\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), __jsx(\"input\", {\n    name: \"password\",\n    defaultValue: \"\",\n    ref: register({\n      required: true\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }), errors.password && __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 29\n    }\n  }, \"This is required\"), __jsx(\"input\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(LoginForm, \"vPFK2pKRWaWGaeDP5eZwYJyKpZ4=\", false, function () {\n  return [useForm, useDispatch];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/components/loginForm.js"],"names":["React","useForm","useSelector","useDispatch","Input","loginRequestAction","LoginForm","register","handleSubmit","watch","errors","dispatch","onSubmit","data","id","password","console","log","required","visible"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AAAA,iBAE4BL,OAAO,EAFnC;AAAA,MAEdM,QAFc,YAEdA,QAFc;AAAA,MAEJC,YAFI,YAEJA,YAFI;AAAA,MAEUC,KAFV,YAEUA,KAFV;AAAA,MAEiBC,MAFjB,YAEiBA,MAFjB,EAGtB;;;AAEA,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AAEA,MAAMS,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAU;AACzBF,IAAAA,QAAQ,CAACN,kBAAkB,CAAC;AAC1BS,MAAAA,EAAE,EAAED,IAAI,CAACC,EADiB;AAE1BC,MAAAA,QAAQ,EAAEF,IAAI,CAACE;AAFW,KAAD,CAAnB,CAAR;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACC,EAAjB,EAAqBD,IAAI,CAACE,QAA1B;AACD,GAND;;AASA,SACE,4BAEE;AAAM,IAAA,QAAQ,EAAEP,YAAY,CAACI,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAO,IAAA,IAAI,EAAC,IAAZ;AAAiB,IAAA,YAAY,EAAC,EAA9B;AAAiC,IAAA,GAAG,EAAEL,QAAQ,CAAC;AAAEW,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGGR,MAAM,CAACI,EAAP,IAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHhB,EAKE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,WAAW,EAAC,gBADd;AAEE,IAAA,UAAU,EAAE,oBAAAK,OAAO;AAAA,aAAKA,OAAO,GAAG,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAAoB,MAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAhC;AAAA,KAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EASE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,YAAY,EAAC,EAApC;AAAuC,IAAA,GAAG,EAAEZ,QAAQ,CAAC;AAAEW,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAWGR,MAAM,CAACK,QAAP,IAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAXtB,EAYE;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CAFF,CADF;AAmBD,CAnCD;;GAAMT,S;UAE8CL,O,EAGjCE,W;;;KALbG,S;AAqCN,eAAeA,SAAf","sourcesContent":["import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Input } from 'antd';\r\nimport { loginRequestAction } from '../reducers/user';\r\n\r\nconst LoginForm = () => {\r\n\r\n  const { register, handleSubmit, watch, errors } = useForm();\r\n  // console.log(watch('example')); // watch input value by passing the name of it \r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (data) => {\r\n    dispatch(loginRequestAction({\r\n      id: data.id,\r\n      password: data.password,\r\n    }));\r\n    console.log(data.id, data.password);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* \"handleSubmit\" will validate your inputs before invoking \"onSubmit\" */}\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        {/* register your input into the hook by invoking the \"register\" function */}\r\n        <input name=\"id\" defaultValue=\"\" ref={register({ required: true })} />\r\n        {errors.id && <span>id is required</span>}\r\n        {/* include validation with required or other standard HTML validation rules */}\r\n        <Input.Password\r\n          placeholder=\"input password\"\r\n          iconRender={visible => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\r\n        />\r\n        <input name=\"password\" defaultValue=\"\" ref={register({ required: true })} />\r\n        {/* errors will return when field validation fails  */}\r\n        {errors.password && <span>This is required</span>}\r\n        <input type=\"submit\" />\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n"]},"metadata":{},"sourceType":"module"}