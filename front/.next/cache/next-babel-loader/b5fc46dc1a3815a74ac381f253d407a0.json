{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\TodoList\\\\front\\\\components\\\\postCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Avatar, Popover, Button } from 'antd';\nimport { LikeOutlined, CommentOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport propTypes from 'prop-types';\nimport parseDate from '../functions/parseDate';\nimport PostImages from './postImages';\nimport { DELETE_POST_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    info\n  } = useSelector(state => state.user);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const dispatch = useDispatch();\n\n  const handleVisibleChange = v => {\n    setVisible(v);\n  };\n\n  const onRemovePost = useCallback(() => {\n    if (!post) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    console.log(post.id);\n    return dispatch({\n      type: DELETE_POST_REQUEST,\n      data: post.id\n    });\n  }, [post.id]);\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    style: {\n      marginTop: '100px',\n      borderTopLeftRadius: '15px',\n      borderTopRightRadius: '15px'\n    },\n    hoverable: true,\n    cover: __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      style: {\n        margin: '15px',\n        flex: '1'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }, __jsx(Avatar, {\n      src: `http://localhost:3065/profile/${post.User.profileImg}`,\n      size: \"large\",\n      style: {\n        width: '50px',\n        height: '50px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    })), __jsx(\"div\", {\n      style: {\n        flex: '15',\n        marginTop: '12px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    }, __jsx(\"strong\", {\n      style: {\n        fontSize: '16px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, post.User.nickname), __jsx(\"p\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, parseDate(post.createdAt)))), __jsx(\"p\", {\n      style: {\n        margin: '7px 15px',\n        fontSize: '18px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, post.content), post.Images.length > 0 && __jsx(PostImages, {\n      alt: \"image\",\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 40\n      }\n    })),\n    actions: info.id === post.UserId ? [__jsx(LikeOutlined, {\n      key: \"like\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }), __jsx(CommentOutlined, {\n      key: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 19\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 19\n        }\n      }, \"\\uC0AD\\uC81C\")),\n      trigger: \"click\",\n      visible: visible,\n      onVisibleChange: handleVisibleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, __jsx(EllipsisOutlined, {\n      key: \"etc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }))] : [__jsx(LikeOutlined, {\n      key: \"like\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 14\n      }\n    }), __jsx(CommentOutlined, {\n      key: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 43\n      }\n    })],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }));\n};\n\nPostCard.propTypes = {\n  post: propTypes.object.isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/components/postCard.js"],"names":["React","useState","useCallback","useSelector","useDispatch","Card","Avatar","Popover","Button","LikeOutlined","CommentOutlined","EllipsisOutlined","propTypes","parseDate","PostImages","DELETE_POST_REQUEST","PostCard","post","info","state","user","visible","setVisible","dispatch","handleVisibleChange","v","onRemovePost","alert","console","log","id","type","data","marginTop","borderTopLeftRadius","borderTopRightRadius","display","flexDirection","margin","flex","User","profileImg","width","height","fontSize","nickname","color","createdAt","content","Images","length","UserId","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Card, Avatar, Popover, Button } from 'antd';\r\nimport { LikeOutlined, CommentOutlined, EllipsisOutlined } from '@ant-design/icons';\r\nimport propTypes from 'prop-types';\r\nimport parseDate from '../functions/parseDate';\r\nimport PostImages from './postImages';\r\nimport { DELETE_POST_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n  const { info } = useSelector((state) => state.user);\r\n  const [visible, setVisible] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleVisibleChange = (v) => {\r\n    setVisible(v);\r\n  };\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    if (!post) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    console.log(post.id);\r\n\r\n    return dispatch({\r\n      type: DELETE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [post.id]);\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        style={{ marginTop: '100px', borderTopLeftRadius: '15px', borderTopRightRadius: '15px' }}\r\n        hoverable\r\n        cover={(\r\n          <div>\r\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n              <div style={{ margin: '15px', flex: '1' }}>\r\n                <Avatar\r\n                  src={`http://localhost:3065/profile/${post.User.profileImg}`}\r\n                  size=\"large\"\r\n                  style={{ width: '50px', height: '50px' }}\r\n                />\r\n              </div>\r\n              <div style={{ flex: '15', marginTop: '12px' }}>\r\n                <strong style={{ fontSize: '16px' }}>{post.User.nickname}</strong>\r\n                <p style={{ color: 'gray' }}>{parseDate(post.createdAt)}</p>\r\n              </div>\r\n            </div>\r\n            <p style={{ margin: '7px 15px', fontSize: '18px' }}>{post.content}</p>\r\n            {post.Images.length > 0 && <PostImages alt=\"image\" images={post.Images} />}\r\n          </div>\r\n        )}\r\n        actions={info.id === post.UserId\r\n          ? [\r\n            <LikeOutlined key=\"like\" />,\r\n            <CommentOutlined key=\"comment\" />,\r\n            <Popover\r\n              key=\"more\"\r\n              content={(\r\n                <Button.Group>\r\n                  <Button>수정</Button>\r\n                  <Button onClick={onRemovePost}>삭제</Button>\r\n                </Button.Group>\r\n              )}\r\n              trigger=\"click\"\r\n              visible={visible}\r\n              onVisibleChange={handleVisibleChange}\r\n            >\r\n              <EllipsisOutlined key=\"etc\" />\r\n            </Popover>]\r\n          : [<LikeOutlined key=\"like\" />, <CommentOutlined key=\"comment\" />]}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: propTypes.object.isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}