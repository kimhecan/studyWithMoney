{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(AddPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { takeLatest, call, put, fork, all, take } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post';\n\nfunction AddPostAPI(data) {\n  // 포스트 추가하기\n  return axios.post('/post', data);\n}\n\n_c = AddPostAPI;\n\nfunction AddPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function AddPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(AddPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result.data, '유저정보불러오기');\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\n_c2 = AddPost;\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, AddPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //----------------------------------------------------------------------\n\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost), fork(watchUploadImages) //fork(watchLoadPost),\n          //fork(watchUpdatePost),\n          //fork(watchDeletePost),\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddPostAPI\");\n$RefreshReg$(_c2, \"AddPost\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/sagas/post.js"],"names":["AddPost","watchAddPost","uploadImages","watchUploadImages","postSaga","takeLatest","call","put","fork","all","take","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","AddPostAPI","data","post","action","result","console","log","type","error","response","uploadImagesAPI"],"mappings":";;oDAWUA,O;qDAiBAC,Y;qDAUAC,Y;qDAeAC,iB;qDAIeC,Q;;AAzDzB,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,GAAtC,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EACoBC,gBADpB,EACsCC,gBADtC,EAEEC,qBAFF,EAEyBC,qBAFzB,EAEgDC,qBAFhD,QAGO,kBAHP;;AAKA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAE;AAC1B,SAAOR,KAAK,CAACS,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAP;AACD;;KAFQD,U;;AAIT,SAAUlB,OAAV,CAAkBqB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMf,IAAI,CAACY,UAAD,EAAaG,MAAM,CAACF,IAApB,CAAV;;AAFnB;AAEUG,UAAAA,MAFV;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACH,IAAnB,EAAyB,UAAzB;AAHJ;AAII,iBAAMZ,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAEZ,gBADE;AAERM,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASII,UAAAA,OAAO,CAACG,KAAR;AATJ;AAUI,iBAAMnB,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAEX,gBADE;AAERY,YAAAA,KAAK,EAAE,YAAEC,QAAF,CAAWR;AAFV,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;MAAUnB,O;;AAiBV,SAAUC,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAACO,gBAAD,EAAmBZ,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AAEA,SAAS4B,eAAT,CAAyBT,IAAzB,EAA+B;AAC7B,SAAOR,KAAK,CAACS,IAAN,CAAW,cAAX,EAA2BD,IAA3B,CAAP;AACD;;AAED,SAAUjB,YAAV,CAAuBmB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMf,IAAI,CAACsB,eAAD,EAAkBP,MAAM,CAACF,IAAzB,CAAV;;AAFnB;AAEUG,UAAAA,MAFV;AAAA;AAGI,iBAAMf,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAET,qBADE;AAERG,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQII,UAAAA,OAAO,CAACG,KAAR;AARJ;AASI,iBAAMnB,GAAG,CAAC;AACRkB,YAAAA,IAAI,EAAER,qBADE;AAERS,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFZ,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUhB,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAME,UAAU,CAACU,qBAAD,EAAwBb,YAAxB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMK,GAAG,CAAC,CACRD,IAAI,CAACP,YAAD,CADI,EAERO,IAAI,CAACL,iBAAD,CAFI,CAGR;AACA;AACA;AALQ,WAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, call, put, fork, all, take } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n} from '../reducers/post';\r\n\r\nfunction AddPostAPI(data) { // 포스트 추가하기\r\n  return axios.post('/post', data);\r\n}\r\n\r\nfunction* AddPost(action) {\r\n  try {\r\n    const result = yield call(AddPostAPI, action.data);\r\n    console.log(result.data, '유저정보불러오기');\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, AddPost);\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchUploadImages),\r\n    //fork(watchLoadPost),\r\n    //fork(watchUpdatePost),\r\n    //fork(watchDeletePost),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}