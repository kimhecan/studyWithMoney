{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(LogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(LogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(LoadUser),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUser),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { takeLatest, call, put, fork, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user';\n\nfunction signUpAPI(data) {\n  // 가입하기\n  return axios.post('/user', data);\n}\n\nfunction signUp(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function signUp$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result.data, 'signUpdata');\n          _context.next = 7;\n          return put({\n            type: SIGN_UP_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //---------------------------------------------------------------\n\n\nfunction LogInAPI(data) {\n  // 로그인하기\n  return axios.post('/user/login', data);\n}\n\n_c = LogInAPI;\n\nfunction LogIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function LogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(LogInAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          console.log(result, '로그인정보');\n          _context3.next = 7;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\n_c2 = LogIn;\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, LogIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //---------------------------------------------------------------\n\n\nfunction LogOutAPI() {\n  // 로그아웃하기\n  return axios.post('/user/logout');\n}\n\n_c3 = LogOutAPI;\n\nfunction LogOut() {\n  var result;\n  return _regeneratorRuntime.wrap(function LogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(LogOutAPI);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOG_OUT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\n_c4 = LogOut;\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, LogOut);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //-----------------------------------------------------------------\n\n\nfunction LoadUserAPI() {\n  // 유저정보 불러오기\n  return axios.get('/user');\n}\n\n_c5 = LoadUserAPI;\n\nfunction LoadUser() {\n  var result;\n  return _regeneratorRuntime.wrap(function LoadUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(LoadUserAPI);\n\n        case 3:\n          result = _context7.sent;\n          console.log(result.data, '유저정보불러오기');\n          _context7.next = 7;\n          return put({\n            type: LOAD_USER_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context7.next = 14;\n          break;\n\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 14;\n          return put({\n            type: LOAD_USER_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 9]]);\n}\n\n_c6 = LoadUser;\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_USER_REQUEST, LoadUser);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchLoadUser)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"LogInAPI\");\n$RefreshReg$(_c2, \"LogIn\");\n$RefreshReg$(_c3, \"LogOutAPI\");\n$RefreshReg$(_c4, \"LogOut\");\n$RefreshReg$(_c5, \"LoadUserAPI\");\n$RefreshReg$(_c6, \"LoadUser\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/sagas/user.js"],"names":["signUp","watchSignUp","LogIn","watchLogIn","LogOut","watchLogOut","LoadUser","watchLoadUser","userSaga","takeLatest","call","put","fork","all","axios","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","signUpAPI","data","post","action","result","console","log","type","error","response","LogInAPI","LogOutAPI","LoadUserAPI","get"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, fork, all } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n  LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction signUpAPI(data) { // 가입하기\r\n  return axios.post('/user', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log(result.data, 'signUpdata');\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n//---------------------------------------------------------------\r\n\r\nfunction LogInAPI(data) { // 로그인하기\r\n  return axios.post('/user/login', data);\r\n}\r\n\r\nfunction* LogIn(action) {\r\n  try {\r\n    const result = yield call(LogInAPI, action.data);\r\n    console.log(result, '로그인정보');\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, LogIn);\r\n}\r\n//---------------------------------------------------------------\r\nfunction LogOutAPI() { // 로그아웃하기\r\n  return axios.post('/user/logout');\r\n}\r\n\r\nfunction* LogOut() {\r\n  try {\r\n    const result = yield call(LogOutAPI);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, LogOut);\r\n}\r\n\r\n//-----------------------------------------------------------------\r\nfunction LoadUserAPI() { // 유저정보 불러오기\r\n  return axios.get('/user');\r\n}\r\n\r\nfunction* LoadUser() {\r\n  try {\r\n    const result = yield call(LoadUserAPI);\r\n    console.log(result.data, '유저정보불러오기');\r\n    yield put({\r\n      type: LOAD_USER_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOAD_USER_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadUser() {\r\n  yield takeLatest(LOAD_USER_REQUEST, LoadUser);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n    fork(watchLoadUser),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}