{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  postInfos: [],\n  addPostMessage: null\n};\nvar ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nvar ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nvar ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nvar LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nvar LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nvar LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nvar UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\nvar UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\nvar UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\nvar DELETE_POST_REQUEST = 'DELETE_POST_REQUEST';\nvar DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS';\nvar DELETE_POST_FAILURE = 'DELETE_POST_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.postInfos.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostMessage = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        break;\n\n      case LOAD_POST_SUCCESS:\n        break;\n\n      case LOAD_POST_FAILURE:\n        break;\n\n      case UPDATE_POST_REQUEST:\n        break;\n\n      case UPDATE_POST_SUCCESS:\n        break;\n\n      case UPDATE_POST_FAILURE:\n        break;\n\n      case DELETE_POST_REQUEST:\n        break;\n\n      case DELETE_POST_SUCCESS:\n        break;\n\n      case DELETE_POST_FAILURE:\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/reducers/post.js"],"names":["produce","initialState","postInfos","addPostMessage","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","UPDATE_POST_REQUEST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","addPost","data","type","addComment","ADD_COMMENT_REQUEST","reducer","state","action","draft","unshift","error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AAEA,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,cAAc,EAAE;AAFU,CAArB;AAMP,IAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAMC,gBAAgB,GAAG,kBAAzB;AACA,IAAMC,gBAAgB,GAAG,kBAAzB;AAEA,IAAMC,iBAAiB,GAAG,mBAA1B;AACA,IAAMC,iBAAiB,GAAG,mBAA1B;AACA,IAAMC,iBAAiB,GAAG,mBAA1B;AAEA,IAAMC,mBAAmB,GAAG,qBAA5B;AACA,IAAMC,mBAAmB,GAAG,qBAA5B;AACA,IAAMC,mBAAmB,GAAG,qBAA5B;AAEA,IAAMC,mBAAmB,GAAG,qBAA5B;AACA,IAAMC,mBAAmB,GAAG,qBAA5B;AACA,IAAMC,mBAAmB,GAAG,qBAA5B;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAW;AAChCC,IAAAA,IAAI,EAAEd,gBAD0B;AAEhCa,IAAAA,IAAI,EAAJA;AAFgC,GAAX;AAAA,CAAhB;AAKP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACF,IAAD;AAAA,SAAW;AACnCC,IAAAA,IAAI,EAAEE,mBAD6B;AAEnCH,IAAAA,IAAI,EAAJA;AAFmC,GAAX;AAAA,CAAnB;;AAMP,IAAMI,OAAO,GAAG,SAAVA,OAAU;AAAA,MAACC,KAAD,uEAASrB,YAAT;AAAA,MAAuBsB,MAAvB;AAAA,SAAkCvB,OAAO,CAACsB,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC1E,YAAQD,MAAM,CAACL,IAAf;AACE,WAAKd,gBAAL;AACE;;AACF,WAAKC,gBAAL;AACEmB,QAAAA,KAAK,CAACtB,SAAN,CAAgBuB,OAAhB,CAAwBF,MAAM,CAACN,IAA/B;AACA;;AACF,WAAKX,gBAAL;AACEkB,QAAAA,KAAK,CAACrB,cAAN,GAAuBoB,MAAM,CAACG,KAA9B;AACA;;AACF,WAAKnB,iBAAL;AACE;;AACF,WAAKC,iBAAL;AACE;;AACF,WAAKC,iBAAL;AACE;;AACF,WAAKC,mBAAL;AACE;;AACF,WAAKC,mBAAL;AACE;;AACF,WAAKC,mBAAL;AACE;;AACF,WAAKC,mBAAL;AACE;;AACF,WAAKC,mBAAL;AACE;;AACF,WAAKC,mBAAL;AACE;;AACF;AACE;AA5BJ;AA8BD,GA/BwD,CAAzC;AAAA,CAAhB;;AAiCA,eAAeM,OAAf","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n  postInfos: [],\r\n  addPostMessage: null,\r\n};\r\n\r\n\r\nconst ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nconst ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nconst ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nconst LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\r\nconst LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\r\nconst LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\r\n\r\nconst UPDATE_POST_REQUEST = 'UPDATE_POST_REQUEST';\r\nconst UPDATE_POST_SUCCESS = 'UPDATE_POST_SUCCESS';\r\nconst UPDATE_POST_FAILURE = 'UPDATE_POST_FAILURE';\r\n\r\nconst DELETE_POST_REQUEST = 'DELETE_POST_REQUEST';\r\nconst DELETE_POST_SUCCESS = 'DELETE_POST_SUCCESS';\r\nconst DELETE_POST_FAILURE = 'DELETE_POST_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.postInfos.unshift(action.data);\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostMessage = action.error;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      break;\r\n    case UPDATE_POST_REQUEST:\r\n      break;\r\n    case UPDATE_POST_SUCCESS:\r\n      break;\r\n    case UPDATE_POST_FAILURE:\r\n      break;\r\n    case DELETE_POST_REQUEST:\r\n      break;\r\n    case DELETE_POST_SUCCESS:\r\n      break;\r\n    case DELETE_POST_FAILURE:\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}