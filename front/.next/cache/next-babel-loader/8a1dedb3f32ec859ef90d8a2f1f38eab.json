{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\TodoList\\\\front\\\\components\\\\postForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\nvar TextArea = Input.TextArea;\n\nvar PostForm = function PostForm(_ref) {\n  _s();\n\n  var category = _ref.category;\n  var dispatch = useDispatch();\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths;\n\n  var onFinish = function onFinish(values) {\n    console.log(values);\n    var formData = new FormData();\n    formData.append('title', values.title);\n    formData.append('content', values.content);\n    formData.append('category', category);\n    imagePaths.forEach(function (p) {\n      formData.append('image', p);\n    });\n    console.log(formData.title);\n    console.log(formData.content);\n    console.log(formData.image);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n    return form.resetFields();\n  };\n\n  var onFinishFailed = function onFinishFailed(errorInfo) {\n    console.log('Failed:', errorInfo);\n  };\n\n  var imageInput = useRef();\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log('images', e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }); // map 안에 데이터를 함수에 넣고 싶으면 고차함수 사용\n\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: index\n      });\n    };\n  });\n  return __jsx(React.Fragment, null, __jsx(Form, {\n    form: form,\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    encType: \"multipart/form-data\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(TextArea, {\n    name: \"content\",\n    rows: 4,\n    placeholder: \"\\uC5EC\\uAE30\\uB97C \\uB20C\\uB7EC\\uC11C \\uAE00\\uC744 \\uC791\\uC131\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    style: {\n      flex: 1\n    },\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \" \\uAC8C\\uC2DC\\uD558\\uAE30 \"), __jsx(\"div\", {\n    style: {\n      flex: 1,\n      marginLeft: '10px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"))), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, imagePaths.map(function (v, i) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block',\n        width: '280px',\n        borderRadius: '5px',\n        border: '1px solid #c0c0c0',\n        padding: '10px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3065/\".concat(v),\n      style: {\n        width: '50px'\n      },\n      alt: v,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }), __jsx(DeleteOutlined, {\n      onClick: onRemoveImage(i),\n      style: {\n        marginLeft: '130px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }));\n  }))));\n};\n\n_s(PostForm, \"gL8rLG/riGWlj3C9EcAEST03/j0=\", false, function () {\n  return [useDispatch, Form.useForm, useSelector];\n});\n\n_c = PostForm;\nPostForm.propTypes = {\n  category: PropTypes.string.isRequired\n};\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/components/postForm.js"],"names":["React","useCallback","useEffect","useRef","useDispatch","useSelector","PropTypes","Form","Input","Button","DeleteOutlined","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","ADD_POST_REQUEST","TextArea","PostForm","category","dispatch","useForm","form","state","post","imagePaths","onFinish","values","console","log","formData","FormData","append","title","content","forEach","p","image","type","data","resetFields","onFinishFailed","errorInfo","imageInput","onClickImageUpload","current","click","onChangeImages","e","target","files","imageFormData","call","f","onRemoveImage","index","display","flexDirection","flex","marginLeft","map","v","i","width","borderRadius","border","padding","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE, ADD_POST_REQUEST } from '../reducers/post';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst PostForm = ({ category }) => {\r\n  const dispatch = useDispatch();\r\n  const [form] = Form.useForm();\r\n  const { imagePaths } = useSelector((state) => state.post);\r\n\r\n  const onFinish = (values) => {\r\n    console.log(values);\r\n\r\n    const formData = new FormData();\r\n    formData.append('title', values.title);\r\n    formData.append('content', values.content);\r\n    formData.append('category', category);\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);\r\n    });\r\n    console.log(formData.title);\r\n    console.log(formData.content);\r\n    console.log(formData.image);\r\n\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n\r\n    return form.resetFields();\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const imageInput = useRef();\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log('images', e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  });\r\n\r\n  // map 안에 데이터를 함수에 넣고 싶으면 고차함수 사용\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Form form={form} onFinish={onFinish} onFinishFailed={onFinishFailed} encType=\"multipart/form-data\">\r\n        <TextArea name=\"content\" rows={4} placeholder=\"여기를 눌러서 글을 작성할 수 있습니다\" />\r\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n          <Button style={{ flex: 1 }} type=\"primary\" htmlType=\"submit\"> 게시하기 </Button>\r\n          <div style={{ flex: 1, marginLeft: '10px' }}>\r\n            <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n            <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {imagePaths.map((v, i) => (\r\n            <div key={v} style={{ display: 'inline-block', width: '280px', borderRadius: '5px', border: '1px solid #c0c0c0', padding: '10px' }}>\r\n              <img src={`http://localhost:3065/${v}`} style={{ width: '50px' }} alt={v} />\r\n              <DeleteOutlined onClick={onRemoveImage(i)} style={{ marginLeft: '130px' }} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </Form>\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nPostForm.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PostForm;\r\n"]},"metadata":{},"sourceType":"module"}