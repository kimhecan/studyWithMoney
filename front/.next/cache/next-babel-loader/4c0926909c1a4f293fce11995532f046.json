{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(AddPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { takeLatest, call, put, fork, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE } from '../reducers/post';\n\nfunction AddPostAPI(data) {\n  // 포스트 추가하기\n  console.log(data, 'saga');\n  return axios.post('/post', data);\n}\n\n_c = AddPostAPI;\n\nfunction AddPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function AddPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(AddPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result.data, '유저정보불러오기');\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\n_c2 = AddPost;\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, AddPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //----------------------------------------------------------------------\n\n\nfunction uploadImagesAPI(data) {\n  // image미리보기를 위해 서버에 저장하고 url 받기\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //-------------------------------------------------------------------------\n\n\nfunction laodPostsAPI(data) {\n  // Post로드하기\n  console.log(data, 'datadatadatadatadata');\n  return axios.get(\"/posts?lastId=\".concat(data.lastId || 0, \"&category=\").concat(data.category));\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(laodPostsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          console.log(result, 'result');\n          _context5.next = 7;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context5.next = 14;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 14;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchUploadImages), fork(watchLoadPost) // fork(watchUpdatePost),\n          // fork(watchDeletePost),\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddPostAPI\");\n$RefreshReg$(_c2, \"AddPost\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/sagas/post.js"],"names":["AddPost","watchAddPost","uploadImages","watchUploadImages","loadPosts","watchLoadPost","postSaga","takeLatest","call","put","fork","all","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","AddPostAPI","data","console","log","post","action","result","type","error","response","uploadImagesAPI","laodPostsAPI","get","lastId","category"],"mappings":"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","sourcesContent":["import { takeLatest, call, put, fork, all } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n  LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE,\r\n} from '../reducers/post';\r\n\r\nfunction AddPostAPI(data) { // 포스트 추가하기\r\n  console.log(data, 'saga');\r\n  return axios.post('/post', data);\r\n}\r\n\r\nfunction* AddPost(action) {\r\n  try {\r\n    const result = yield call(AddPostAPI, action.data);\r\n    console.log(result.data, '유저정보불러오기');\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, AddPost);\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\nfunction uploadImagesAPI(data) { // image미리보기를 위해 서버에 저장하고 url 받기\r\n  return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\n//-------------------------------------------------------------------------\r\n\r\nfunction laodPostsAPI(data) { // Post로드하기\r\n  console.log(data, 'datadatadatadatadata');\r\n  return axios.get(`/posts?lastId=${data.lastId || 0}&category=${data.category}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(laodPostsAPI, action.data);\r\n    console.log(result, 'result');\r\n\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchUploadImages),\r\n    fork(watchLoadPost),\r\n    // fork(watchUpdatePost),\r\n    // fork(watchDeletePost),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}