{"ast":null,"code":"import { takeLatest, call, put, fork, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post';\n\nfunction AddPostAPI(data) {\n  // 포스트 추가하기\n  return axios.post('/post', data);\n}\n\nfunction* AddPost(action) {\n  try {\n    const result = yield call(AddPostAPI, action.data);\n    console.log(result.data, '유저정보불러오기');\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, AddPost);\n} //----------------------------------------------------------------------\n\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchUploadImages) //fork(watchLoadPost),\n  //fork(watchUpdatePost),\n  //fork(watchDeletePost),\n  ]);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/sagas/post.js"],"names":["takeLatest","call","put","fork","all","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","AddPostAPI","data","post","AddPost","action","result","console","log","type","e","error","response","watchAddPost","uploadImagesAPI","uploadImages","err","watchUploadImages","postSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EACoBC,gBADpB,EACsCC,gBADtC,EAEEC,qBAFF,EAEyBC,qBAFzB,EAEgDC,qBAFhD,QAGO,kBAHP;;AAKA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAE;AAC1B,SAAOR,KAAK,CAACS,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMhB,IAAI,CAACW,UAAD,EAAaI,MAAM,CAACH,IAApB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACJ,IAAnB,EAAyB,UAAzB;AACA,UAAMX,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEb,gBADE;AAERM,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOQ,CAAP,EAAU;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,CAAd;AACA,UAAMnB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEZ,gBADE;AAERc,MAAAA,KAAK,EAAED,CAAC,CAACE,QAAF,CAAWV;AAFV,KAAD,CAAT;AAID;AACF;;AAED,UAAUW,YAAV,GAAyB;AACvB,QAAMxB,UAAU,CAACM,gBAAD,EAAmBS,OAAnB,CAAhB;AACD,C,CAED;;;AAEA,SAASU,eAAT,CAAyBZ,IAAzB,EAA+B;AAC7B,SAAOR,KAAK,CAACS,IAAN,CAAW,cAAX,EAA2BD,IAA3B,CAAP;AACD;;AAED,UAAUa,YAAV,CAAuBV,MAAvB,EAA+B;AAC7B,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMhB,IAAI,CAACwB,eAAD,EAAkBT,MAAM,CAACH,IAAzB,CAAzB;AACA,UAAMX,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEV,qBADE;AAERG,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOc,GAAP,EAAY;AACZT,IAAAA,OAAO,CAACI,KAAR,CAAcK,GAAd;AACA,UAAMzB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAET,qBADE;AAERW,MAAAA,KAAK,EAAEK,GAAG,CAACJ,QAAJ,CAAaV;AAFZ,KAAD,CAAT;AAID;AACF;;AACD,UAAUe,iBAAV,GAA8B;AAC5B,QAAM5B,UAAU,CAACS,qBAAD,EAAwBiB,YAAxB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMzB,GAAG,CAAC,CACRD,IAAI,CAACqB,YAAD,CADI,EAERrB,IAAI,CAACyB,iBAAD,CAFI,CAGR;AACA;AACA;AALQ,GAAD,CAAT;AAOD","sourcesContent":["import { takeLatest, call, put, fork, all } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n} from '../reducers/post';\r\n\r\nfunction AddPostAPI(data) { // 포스트 추가하기\r\n  return axios.post('/post', data);\r\n}\r\n\r\nfunction* AddPost(action) {\r\n  try {\r\n    const result = yield call(AddPostAPI, action.data);\r\n    console.log(result.data, '유저정보불러오기');\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, AddPost);\r\n}\r\n\r\n//----------------------------------------------------------------------\r\n\r\nfunction uploadImagesAPI(data) {\r\n  return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const result = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchUploadImages),\r\n    //fork(watchLoadPost),\r\n    //fork(watchUpdatePost),\r\n    //fork(watchDeletePost),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}