{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(LogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(LogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { takeLatest, call, put, fork, all } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from '../reducers/user';\n\nfunction signUpAPI(data) {\n  // 가입하기\n  console.log(123);\n  return axios.post('/user', data);\n}\n\nfunction signUp(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function signUp$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result);\n          _context.next = 7;\n          return put({\n            type: SIGN_UP_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('watchSignUp');\n          _context2.next = 3;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //---------------------------------------------------------------\n\n\nfunction LogInAPI(data) {\n  // 로그인하기\n  return axios.post('/user', data);\n}\n\n_c = LogInAPI;\n\nfunction LogIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function LogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(LogInAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          console.log(result, '로그인정보');\n          _context3.next = 7;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\n_c2 = LogIn;\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, LogIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //---------------------------------------------------------------\n\n\nfunction LogOutAPI(data) {\n  // 로그아웃하기\n  return axios.post('/user', data);\n}\n\n_c3 = LogOutAPI;\n\nfunction LogOut(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function LogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(LogOutAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          console.log(result, '로그인정보');\n          _context5.next = 7;\n          return put({\n            type: LOG_OUT_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context5.next = 14;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 14;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\n_c4 = LogOut;\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, LogOut);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"LogInAPI\");\n$RefreshReg$(_c2, \"LogIn\");\n$RefreshReg$(_c3, \"LogOutAPI\");\n$RefreshReg$(_c4, \"LogOut\");","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/sagas/user.js"],"names":["signUp","watchSignUp","LogIn","watchLogIn","LogOut","watchLogOut","userSaga","takeLatest","call","put","fork","all","axios","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","signUpAPI","data","console","log","post","action","result","type","error","response","LogInAPI","LogOutAPI"],"mappings":";;oDAaUA,M;qDAiBAC,W;qDAWAC,K;qDAiBAC,U;qDAQAC,M;qDAiBAC,W;qDAIeC,Q;;AAvFzB,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,eADF,EACmBC,eADnB,EACoCC,eADpC,EAEEC,cAFF,EAEkBC,cAFlB,EAEkCC,cAFlC,EAGEC,eAHF,EAGmBC,eAHnB,EAGoCC,eAHpC,QAIO,kBAJP;;AAMA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AAAE;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,SAAOb,KAAK,CAACc,IAAN,CAAW,OAAX,EAAoBH,IAApB,CAAP;AACD;;AAED,SAAUvB,MAAV,CAAiB2B,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMnB,IAAI,CAACc,SAAD,EAAYK,MAAM,CAACJ,IAAnB,CAAV;;AAFnB;AAEUK,UAAAA,MAFV;AAGIJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AAHJ;AAII,iBAAMnB,GAAG,CAAC;AACRoB,YAAAA,IAAI,EAAEf,eADE;AAERS,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIC,UAAAA,OAAO,CAACM,KAAR;AATJ;AAUI,iBAAMrB,GAAG,CAAC;AACRoB,YAAAA,IAAI,EAAEd,eADE;AAERe,YAAAA,KAAK,EAAE,YAAEC,QAAF,CAAWR;AAFV,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUtB,WAAV;AAAA;AAAA;AAAA;AAAA;AACEuB,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AADF;AAGE,iBAAMlB,UAAU,CAACM,eAAD,EAAkBb,MAAlB,CAAhB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKA;;;AAEA,SAASgC,QAAT,CAAkBT,IAAlB,EAAwB;AAAE;AACxB,SAAOX,KAAK,CAACc,IAAN,CAAW,OAAX,EAAoBH,IAApB,CAAP;AACD;;KAFQS,Q;;AAIT,SAAU9B,KAAV,CAAgByB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMnB,IAAI,CAACwB,QAAD,EAAWL,MAAM,CAACJ,IAAlB,CAAV;;AAFnB;AAEUK,UAAAA,MAFV;AAGIJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ,EAAoB,OAApB;AAHJ;AAII,iBAAMnB,GAAG,CAAC;AACRoB,YAAAA,IAAI,EAAEZ,cADE;AAERM,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIC,UAAAA,OAAO,CAACM,KAAR;AATJ;AAUI,iBAAMrB,GAAG,CAAC;AACRoB,YAAAA,IAAI,EAAEX,cADE;AAERY,YAAAA,KAAK,EAAE,aAAEC,QAAF,CAAWR;AAFV,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;MAAUrB,K;;AAiBV,SAAUC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAACS,cAAD,EAAiBd,KAAjB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAGA;;;AACA,SAAS+B,SAAT,CAAmBV,IAAnB,EAAyB;AAAE;AACzB,SAAOX,KAAK,CAACc,IAAN,CAAW,OAAX,EAAoBH,IAApB,CAAP;AACD;;MAFQU,S;;AAIT,SAAU7B,MAAV,CAAiBuB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMnB,IAAI,CAACyB,SAAD,EAAYN,MAAM,CAACJ,IAAnB,CAAV;;AAFnB;AAEUK,UAAAA,MAFV;AAGIJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ,EAAoB,OAApB;AAHJ;AAII,iBAAMnB,GAAG,CAAC;AACRoB,YAAAA,IAAI,EAAET,eADE;AAERG,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIC,UAAAA,OAAO,CAACM,KAAR;AATJ;AAUI,iBAAMrB,GAAG,CAAC;AACRoB,YAAAA,IAAI,EAAER,eADE;AAERS,YAAAA,KAAK,EAAE,aAAEC,QAAF,CAAWR;AAFV,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;MAAUnB,M;;AAiBV,SAAUC,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAME,UAAU,CAACY,eAAD,EAAkBf,MAAlB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMK,GAAG,CAAC,CACRD,IAAI,CAACP,UAAD,CADI,EAERO,IAAI,CAACL,WAAD,CAFI,EAGRK,IAAI,CAACT,WAAD,CAHI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, call, put, fork, all } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n  LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n  LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\r\n} from '../reducers/user';\r\n\r\nfunction signUpAPI(data) { // 가입하기\r\n  console.log(123);\r\n  return axios.post('/user', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    console.log(result);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  console.log('watchSignUp');\r\n\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n//---------------------------------------------------------------\r\n\r\nfunction LogInAPI(data) { // 로그인하기\r\n  return axios.post('/user', data);\r\n}\r\n\r\nfunction* LogIn(action) {\r\n  try {\r\n    const result = yield call(LogInAPI, action.data);\r\n    console.log(result, '로그인정보');\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, LogIn);\r\n}\r\n//---------------------------------------------------------------\r\nfunction LogOutAPI(data) { // 로그아웃하기\r\n  return axios.post('/user', data);\r\n}\r\n\r\nfunction* LogOut(action) {\r\n  try {\r\n    const result = yield call(LogOutAPI, action.data);\r\n    console.log(result, '로그인정보');\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    console.error(e);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, LogOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}