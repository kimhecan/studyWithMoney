{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\TodoList\\\\front\\\\components\\\\postForm.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nconst {\n  TextArea\n} = Input;\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const [form] = Form.useForm();\n  const {\n    imagePaths\n  } = useSelector(state => state.post);\n\n  const onFinish = values => {\n    console.log('Success:', values);\n    form.resetFields();\n  };\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    console.log('images', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }); // map 안에 데이터를 함수에 넣고 싶으면 고차함수 사용\n\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(Form, {\n    name: \"basic\",\n    form: form,\n    onFinish: onFinish,\n    onFinishFailed: onFinishFailed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(Form.Item, {\n    name: \"title\",\n    rules: [{\n      required: true,\n      message: '제목을 입력해 주세요!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    placeholder: \"\\uAE00 \\uC81C\\uBAA9\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  })), __jsx(Form.Item, {\n    name: \"content\",\n    rules: [{\n      required: true,\n      message: '내용을 입력해주세요!'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(TextArea, {\n    rows: 4,\n    placeholder: \"\\uC5EC\\uAE30\\uB97C \\uB20C\\uB7EC\\uC11C \\uAE00\\uC744 \\uC791\\uC131\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  })), __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    style: {\n      flex: '1'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"\\uAC8C\\uC2DC\\uD558\\uAE30\")), __jsx(Form.Item, {\n    style: {\n      flex: '1'\n    },\n    name: \"upload\",\n    valuePropName: \"fileList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, imagePaths.map((v, i) => __jsx(\"div\", {\n    key: v,\n    style: {\n      display: 'inline-block',\n      border: '1px solid #001529',\n      padding: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3065/${v}`,\n    style: {\n      width: '100px'\n    },\n    alt: v,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 19\n    }\n  }), __jsx(Button, {\n    onClick: onRemoveImage(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }\n  }, \"\\uC81C\\uAC70\"))))))));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/components/postForm.js"],"names":["React","useCallback","useEffect","useRef","useDispatch","useSelector","Form","Input","Button","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","TextArea","PostForm","dispatch","form","useForm","imagePaths","state","post","onFinish","values","console","log","resetFields","onFinishFailed","errorInfo","imageInput","onClickImageUpload","current","click","onChangeImages","e","target","files","imageFormData","FormData","forEach","call","f","append","type","data","onRemoveImage","index","required","message","display","flexDirection","flex","map","v","i","border","padding","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [form] = Form.useForm();\r\n  const { imagePaths } = useSelector((state) => state.post);\r\n  const onFinish = (values) => {\r\n    console.log('Success:', values);\r\n\r\n    form.resetFields();\r\n  };\r\n\r\n  const onFinishFailed = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const imageInput = useRef();\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log('images', e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  });\r\n\r\n  // map 안에 데이터를 함수에 넣고 싶으면 고차함수 사용\r\n  const onRemoveImage = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Form name=\"basic\" form={form} onFinish={onFinish} onFinishFailed={onFinishFailed}>\r\n        <Form.Item name=\"title\" rules={[{ required: true, message: '제목을 입력해 주세요!' }]}>\r\n          <Input placeholder=\"글 제목\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"content\" rules={[{ required: true, message: '내용을 입력해주세요!' }]}>\r\n          <TextArea rows={4} placeholder=\"여기를 눌러서 글을 작성할 수 있습니다\" />\r\n        </Form.Item>\r\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n          <Form.Item style={{ flex: '1' }}>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              게시하기\r\n            </Button>\r\n          </Form.Item>\r\n          <Form.Item style={{ flex: '1' }} name=\"upload\" valuePropName=\"fileList\" >\r\n            <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n            <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n            <div>\r\n              {imagePaths.map((v, i) => (\r\n                <div key={v} style={{ display: 'inline-block', border: '1px solid #001529', padding: '10px' }}>\r\n                  <img src={`http://localhost:3065/${v}`} style={{ width: '100px' }} alt={v} />\r\n                  <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </Form.Item>\r\n        </div>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n"]},"metadata":{},"sourceType":"module"}