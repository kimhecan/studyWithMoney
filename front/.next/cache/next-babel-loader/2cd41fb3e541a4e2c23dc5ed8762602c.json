{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\TodoList\\\\front\\\\components\\\\board.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Row, Col, PageHeader } from 'antd';\nimport PostForm from './postForm';\nimport PostCard from './postCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\n\nconst Board = ({\n  category\n}) => {\n  const {\n    postInfos,\n    hasMorePosts\n  } = useSelector(state => state.post);\n  const {\n    0: boardTitle,\n    1: setBoardTitle\n  } = useState('');\n  const {\n    0: subTitle,\n    1: setSubTitle\n  } = useState('');\n  useEffect(() => {\n    if (category === 'freeBoard') {\n      setBoardTitle('자유게시판');\n      setSubTitle('하냥이들의 자유로운 공간입니다');\n    } else if (category === 'infoBoard') {\n      setBoardTitle('정보게시판');\n      setSubTitle('하냥이들의 정보공유 공간입니다');\n    } else {\n      setBoardTitle('동아리·학회 게시판');\n      setSubTitle('하냥이들의 동아리·학회 공간입니다');\n    }\n  }, []);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST,\n      data: {\n        category\n      }\n    });\n  }, []);\n  useEffect(() => {\n    function onScroll() {\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts) {\n          var _postInfos;\n\n          const lastId = (_postInfos = postInfos[postInfos.length - 1]) === null || _postInfos === void 0 ? void 0 : _postInfos.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            data: {\n              lastId,\n              category\n            }\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [postInfos, hasMorePosts]);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(PageHeader, {\n    className: \"site-page-header\",\n    title: boardTitle,\n    subTitle: subTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }), __jsx(PostForm, {\n    category: category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), postInfos.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 36\n    }\n  })))));\n};\n\nBoard.propTypes = {\n  category: PropTypes.string.isRequired\n};\nexport default Board;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/TodoList/front/components/board.js"],"names":["React","useEffect","useState","useSelector","useDispatch","PropTypes","Row","Col","PageHeader","PostForm","PostCard","LOAD_POSTS_REQUEST","Board","category","postInfos","hasMorePosts","state","post","boardTitle","setBoardTitle","subTitle","setSubTitle","dispatch","type","data","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","addEventListener","removeEventListener","map","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, PageHeader } from 'antd';\r\nimport PostForm from './postForm';\r\nimport PostCard from './postCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\n\r\nconst Board = ({ category }) => {\r\n  const { postInfos, hasMorePosts } = useSelector((state) => state.post);\r\n\r\n  const [boardTitle, setBoardTitle] = useState('');\r\n  const [subTitle, setSubTitle] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (category === 'freeBoard') {\r\n      setBoardTitle('자유게시판');\r\n      setSubTitle('하냥이들의 자유로운 공간입니다');\r\n    } else if (category === 'infoBoard') {\r\n      setBoardTitle('정보게시판');\r\n      setSubTitle('하냥이들의 정보공유 공간입니다');\r\n    } else {\r\n      setBoardTitle('동아리·학회 게시판');\r\n      setSubTitle('하냥이들의 동아리·학회 공간입니다');\r\n    }\r\n  }, []);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n      data: {\r\n        category,\r\n      },\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n        if (hasMorePosts) {\r\n          const lastId = postInfos[postInfos.length - 1]?.id;\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            data: {\r\n              lastId,\r\n              category,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener('scroll', onScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll);\r\n    };\r\n  }, [postInfos, hasMorePosts]);\r\n  return (\r\n    <>\r\n      <div>\r\n        <div style={{}}>\r\n          <PageHeader className=\"site-page-header\" title={boardTitle} subTitle={subTitle} />\r\n          <PostForm category={category} />\r\n          {postInfos.map((post) => <PostCard key={post.id} post={post} />)}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nBoard.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}